// i18n.js - Internationalization Script
const translations = {
    en: {
        docTitle: "Gomoku (Caro) Game",
        caroTitle: "Gomoku (Caro) Game",
        caroSubtitle: "Try to get 5 pieces in a row, column, or diagonal.",
        howToPlayButton: "How to Play",
        sidebarTitle: "Caro Rule",
        sidebarContentHTML: `<p>Welcome to the Caro showdown!</p>
                             <p><strong>Objective:</strong> Be the first to get a continuous line of 5 of your pieces horizontally, vertically, or diagonally.</p>
                             <p><strong>How to Play:</strong> Players take turns placing their piece (X or O) on an empty cell on the board.</p>
                             <p><strong>Winning:</strong> The first player to form a 5-piece line wins. If the board is full and no one wins, the game is a draw.</p>
                             <hr>
                             <p><strong>Game Modes:</strong></p>
                             <p>You can challenge a friend in <strong>Player vs Player</strong> mode, or face off against the smart AI in <strong>Player vs Computer</strong> mode.</p>
                             <p>Enjoy the brain-teasing match!</p>`,
        modePVP: "Player vs Player",
        modePVC_X: "vs CPU (Play First)",
        modePVC_O: "vs CPU (Play Second)",
        turnTitle: "Turn",
        playAgain: "Play Again",
        winModalTitle: "üéâ Congratulations! üéâ",
        winModalBodyWin: "<strong>{symbol}</strong> is the winner!", // {symbol} is a placeholder
        winModalBodyDraw: "It's a Draw! Well played by both.",
        winModalClose: "Close",
        winModalPlayAgain: "Play Again",
        // ... (Gi·ªØ c√°c key d·ªãch thu·∫≠t c≈© n·∫øu c·∫ßn cho c√°c trang kh√°c)
    },
    vi: {
        docTitle: "Game C·ªù Caro",
        caroTitle: "Game C·ªù Caro (Gomoku)",
        caroSubtitle: "C·ªë g·∫Øng ƒë·∫°t ƒë∆∞·ª£c 5 qu√¢n c·ªù tr√™n m·ªôt h√†ng ngang, d·ªçc ho·∫∑c ch√©o.",
        howToPlayButton: "H∆∞·ªõng d·∫´n c√°ch ch∆°i",
        sidebarTitle: "Lu·∫≠t Ch∆°i C·ªù Caro",
        sidebarContentHTML: `<p>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi tr·∫≠n ƒë·∫•u tr√≠ Caro!</p>
                             <p><strong>M·ª•c ti√™u:</strong> L√† ng∆∞·ªùi ƒë·∫ßu ti√™n c√≥ ƒë∆∞·ª£c m·ªôt chu·ªói 5 qu√¢n c·ªù li√™n ti·∫øp theo h√†ng ngang, h√†ng d·ªçc, ho·∫∑c ƒë∆∞·ªùng ch√©o.</p>
                             <p><strong>C√°ch ch∆°i:</strong> L·∫ßn l∆∞·ª£t m·ªói ng∆∞·ªùi ch∆°i s·∫Ω ƒë·∫∑t qu√¢n c·ªù (X ho·∫∑c O) c·ªßa m√¨nh v√†o m·ªôt √¥ tr·ªëng tr√™n b√†n c·ªù.</p>
                             <p><strong>Chi·∫øn th·∫Øng:</strong> Ng∆∞·ªùi ch∆°i n√†o t·∫°o ƒë∆∞·ª£c chu·ªói 5 qu√¢n tr∆∞·ªõc s·∫Ω l√† ng∆∞·ªùi chi·∫øn th·∫Øng. N·∫øu b√†n c·ªù ƒë·∫ßy m√† kh√¥ng ai th·∫Øng, v√°n c·ªù s·∫Ω h√≤a.</p>
                             <hr>
                             <p><strong>Ch·∫ø ƒë·ªô ch∆°i:</strong></p>
                             <p>B·∫°n c√≥ th·ªÉ th·ª≠ s·ª©c v·ªõi m·ªôt ng∆∞·ªùi b·∫°n trong ch·∫ø ƒë·ªô <strong>Ng∆∞·ªùi vs Ng∆∞·ªùi</strong>, ho·∫∑c ƒë·ªëi ƒë·∫ßu v·ªõi AI th√¥ng minh c·ªßa m√°y trong ch·∫ø ƒë·ªô <strong>Ng∆∞·ªùi vs M√°y</strong>.</p>
                             <p>Ch√∫c b·∫°n c√≥ nh·ªØng v√°n c·ªù c√¢n n√£o!</p>`,
        modePVP: "Ng∆∞·ªùi vs Ng∆∞·ªùi",
        modePVC_X: "ƒê·∫•u M√°y (ƒêi tr∆∞·ªõc)",
        modePVC_O: "ƒê·∫•u M√°y (ƒêi sau)",
        turnTitle: "L∆∞·ª£t",
        playAgain: "Ch∆°i L·∫°i",
        winModalTitle: "üéâ Ch√∫c M·ª´ng! üéâ",
        winModalBodyWin: "Ng∆∞·ªùi ch∆°i <strong>{symbol}</strong> ƒë√£ chi·∫øn th·∫Øng!",
        winModalBodyDraw: "V√°n c·ªù h√≤a! M·ªôt tr·∫≠n ƒë·∫•u ngang t√†i ngang s·ª©c.",
        winModalClose: "ƒê√≥ng",
        winModalPlayAgain: "Ch∆°i L·∫°i",
         // ... (Gi·ªØ c√°c key d·ªãch thu·∫≠t c≈© n·∫øu c·∫ßn cho c√°c trang kh√°c)
    }
};

function setLanguage(lang) {
    if (!translations[lang]) return;
    document.documentElement.lang = lang;
    const langTranslations = translations[lang];

    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        const translation = langTranslations[key];
        if (translation !== undefined) {
            if (key.endsWith('HTML')) {
                element.innerHTML = translation;
            } else {
                element.textContent = translation;
            }
        }
    });

    // C·∫≠p nh·∫≠t n√∫t active
    document.querySelectorAll('.lang-switcher .lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === lang) btn.classList.add('active');
    });

    localStorage.setItem('preferredLanguage', lang);
}

document.addEventListener('DOMContentLoaded', () => {
    // Logic sidebar
    const insBtn = document.getElementById('insBtn');
    const closeSidebarBtn = document.getElementById('closeSidebar');
    const sidebar = document.getElementById('insSidebar');
    if(insBtn) insBtn.onclick = () => sidebar.classList.add('open');
    if(closeSidebarBtn) closeSidebarBtn.onclick = () => sidebar.classList.remove('open');
    
    // Logic d·ªãch thu·∫≠t
    document.querySelectorAll('.lang-switcher .lang-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            setLanguage(event.target.getAttribute('data-lang'));
        });
    });

    const preferredLang = localStorage.getItem('preferredLanguage') || (translations[navigator.language.split('-')[0]] ? navigator.language.split('-')[0] : 'vi');
    setLanguage(preferredLang);
});